---
title: "Update Query実行時のFusekiサーバの挙動調査"
date: now
date-format: "MMM D, YYYY, HH:mm:ss"
author: "Yuta Nakajima"
description: "<BR>This shell scripts execute different types of analysis codes."
title-block-banner: true
project:
  type: default
  output-dir: ../../../public_html
format:
  html:
    theme: 
      light: flatly
      dark: darkly    
    fontsize: 1.0em
    self-contained: true
    toc: true
    toc-location: left
    number-sections: true
    number-depth: 3
    code-fold: false
    grid:
      sidebar-width: 200px
      body-width: 1000px
      margin-width: 200px
      gutter-width: 2.5rem
execute:
  warning: false
editor: 
  markdown: 
    wrap: 72
---

## 目的


## 手順1: OML立ち上げ

OMLのbuild & load
ターミナルで、下記コマンドを打つ。owlLoadにbuildも入っているので１発でOK。
（Windowsではpowershell）


```bash
./gradlew owlLoad
```


正しく実行できると下記のような結果が得られる。
fusekiサーバが立ち上がっていればOK。

```bash
(py393) (base) mlab@mlabair kepler16b-using-imce-vocabulary % ./gradlew owlLoad
Starting a Gradle Daemon, 2 busy Daemons could not be reused, use --status for details

> Task :startFuseki
Fuseki server has now successfully started with pid=44925, listening on http://localhost:3030

> Task :owlLoadTdb
Loaded 29 owl file(s), unloaded 0 owl file(s)

> Task :owlLoad
Loaded 31 owl file(s) to default graph

BUILD SUCCESSFUL in 26s
6 actionable tasks: 3 executed, 3 up-to-date
(py393) (base) mlab@mlabair kepler16b-using-imce-vocabulary % 
```

## 手順２: 事前確認

これから書き換えようとするパラメータの情報を取得する。


### load utility files

```{r}
#| warning: false
library(stringr)
library(tansakusuR)
```


## Mission Objective

```{r}
query_string_check2 <- '

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sa:  <http://example.com/tutorial2/vocabulary/stateanalysis#>
PREFIX mission: <http://example.com/tutorial2/vocabulary/mission#>

select distinct*
where{
  ?c a mission:Objective .
}


'
```

```{r}
endpoint_url <- "http://localhost:3030/tutorial2-tdb/"
ret <- send_query(endpoint_url,query_string_check2)
ret
```


## 手順3: 書き換え
Add new instance of mission:Objective



```{r}
query_string_update2 <- '


PREFIX oml: <http://def.seegrid.csiro.au/ontology/om/om-lite#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX mission: <http://example.com/tutorial2/vocabulary/mission#>
PREFIX oml: <http://opencaesar.io/oml#>

insert {
  GRAPH <http://example.com/tutorial2/description/objectives> {
	?insertIri a owl:NamedIndividual;
      rdf:type mission:Objective;
      oml:type oml:ConceptInstance.
    
  }
}
WHERE {
    BIND(<http://example.com/tutorial2/description/objectives#fromQuarto202412102141> AS ?insertIri)
}

'
```

### Query 送付


```{r}
endpoint_url <- "http://localhost:3030/tutorial2-tdb/update"
ret <- send_update(endpoint_url = endpoint_url, query_string_update2)
```



## 手順4: 書き換え結果の確認

本来であれば、SPARQL UPDATEクエリーの結果として書き換えた値が反映されていることを期待。
しかしながら、endpointには反映されていない。
なぜか？




### Check
```{r}
endpoint_url <- "http://localhost:3030/tutorial2-tdb/"
ret <- send_query(endpoint_url,query_string_check2)
ret
```


## 手順5: owlSaveによる確認

上記のendpointのデータは書き換えが反映されていなかった。
しかしながあら、owlSaveで得られる.ttlファイルには値が反映されていた。

```bash
./gradlew owlSave
```


[build/save/example.com/tutorial2/description/analysis/orbit_analysis_02.ttl](build/save/example.com/tutorial2/description/analysis/orbit_analysis_02.ttl)のファイルを参照する。

すると下記のようになっており、確かにSPARQL UPDATEの結果が反映されている。

```bash
orbit_analysis_02:cdp-analysis-02.scenario.value.06
        rdf:type                    sa:Assumes , owl:NamedIndividual ;
        sa:assumeInitialStateValue  "thisqueryisfromquarto" , "e5e288a0b2ed554d5fd0014b10e445a82313555396d054a87488ad5cfe218fe8" ;
        oml:hasSource               orbit_analysis_02:cdp-analysis-02.scenario ;
        oml:hasTarget               cdpstatedictionary:output.Scenario.FileKey ;
        oml:type                    oml:RelationInstance .

project:executes  rdf:type  owl:ObjectProperty .
```


## 手順6: owlToOmlによる確認

`owlToOml`コマンドで、owlSaveの結果をOMLファイルに反映できる。

```bash
./gradlew owlToOml
```

確かに、SPARQL UPDATEの結果が反映された。

![result of owlToOml](../../image/feat_analysis/1733752673694.png)




## 分かったこと１

UPDATE Queryに下記のグラフオペレータをつけた場合には、owlSaveに反映され、ブラウザには反映されない。
逆に、グラフオペレータをつけない場合は、owlSaveに反映されず、ブラウザには反映される。
この違いは一体何なのだろうか？？？

```
  graph <http://example.com/tutorial2/description/analysis/orbit_analysis_02> {

  }

```





```{r}
query_string_update2 <- '


PREFIX oml: <http://def.seegrid.csiro.au/ontology/om/om-lite#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX mission: <http://example.com/tutorial2/vocabulary/mission#>
PREFIX oml: <http://opencaesar.io/oml#>

insert {
  GRAPH <http://example.com/tutorial2/description/objectives> {
	?insertIri a owl:NamedIndividual;
      rdf:type mission:Objective;
      oml:type oml:ConceptInstance.
    
  }
}
WHERE {
    BIND(<http://example.com/tutorial2/description/objectives#fromQuartowithGraph> AS ?insertIri)
}

'
```

### Query 送付


```{r}
endpoint_url <- "http://localhost:3030/tutorial2-tdb/update"
ret <- send_update(endpoint_url = endpoint_url, query_string_update2)
```


### Check
```{r}
endpoint_url <- "http://localhost:3030/tutorial2-tdb/"
ret <- send_query(endpoint_url,query_string_check2)
ret
```

